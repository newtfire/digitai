name,description,query,id,parentId,isFolder
elementSpec,,"CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""elementSpec""])') YIELD value AS elementSpec
WITH elementSpec,
     elementSpec.ident AS elementIdent,
     elementSpec.module AS elementModule,
     [child IN elementSpec._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text] AS elementGloss,
     [child IN elementSpec._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text] AS elementDesc,
     // Extract all 'key' attributes from 'memberOf' children within 'classes'
     [c IN elementSpec._children WHERE c._type = 'classes' | [m IN c._children WHERE m._type = 'memberOf' | m.key]] AS classesList
MERGE (e:elementSpec {id: elementIdent})
ON CREATE SET
  e.name = elementIdent,
  e.gloss = elementGloss,
  e.desc = elementDesc,
  e.classes = REDUCE(s = [], x IN classesList | s + x) // Flatten the list of lists into a single list
ON MATCH SET
  e.name = elementIdent,
  e.gloss = elementGloss,
  e.desc = elementDesc,
  e.classes = REDUCE(s = [], x IN classesList | s + x)
REMOVE e.classesType, e.classesKey // Remove these properties if they exist
WITH e, elementModule
WHERE elementModule IS NOT NULL
MERGE (m:Module {kind: elementModule})
ON CREATE SET
    m.name = elementModule
ON MATCH SET
    m.name = elementModule
MERGE (e)-[r:HAS_MODULE]->(m)
RETURN e, r, m",0,,FALSE
1650Properties,,"CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""attDef""])') YIELD value AS attDef
WITH attDef,
      attDef.ident AS attIdent,
      [child IN attDef._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS attGloss,
      [child IN attDef._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS attDesc,
      // Traverse up to find the nearest classSpec ancestor and get its module attribute
      [ancestor IN [(attDef._parent._parent)] WHERE ancestor._type = 'classSpec' | ancestor.module][0] AS attModule
MERGE (a:AttDef {id: attIdent})
ON CREATE SET
  a.name = attIdent,
  a.gloss = attGloss,
  a.desc = attDesc
ON MATCH SET
  a.name = attIdent,
  a.gloss = attGloss,
  a.desc = attDesc
WITH a, attModule
WHERE attModule IS NOT NULL
MERGE (m:Module {kind: attModule})
ON CREATE SET
    m.name = attModule
ON MATCH SET
    m.name = attModule
MERGE (a)-[r:HAS_MODULE]->(m)
RETURN a, r, m, NULL AS cs // Return null for cs for consistency in UNION ALL",1,,FALSE
ClassSpec,,"CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""classSpec""])') YIELD value AS classSpec
WITH classSpec,
      classSpec.ident AS classIdent,
      classSpec.module AS classModule,
      [child IN classSpec._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS classGloss, // Extract gloss text
      [child IN classSpec._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS classDesc // Extract desc text
MERGE (c:ClassSpec {id: classIdent})
ON CREATE SET
  c.name = classIdent,
  c.gloss = classGloss, // Set gloss as a property on creation
  c.desc = classDesc // Set desc as a property on creation
ON MATCH SET
  c.name = classIdent,
  c.gloss = classGloss, // Update gloss as a property on match
  c.desc = classDesc // Update desc as a property on match
WITH c, classModule
WHERE classModule IS NOT NULL
MERGE (m:Module {kind: classModule})
ON CREATE SET
    m.name = classModule
ON MATCH SET
    m.name = classModule
MERGE (c)-[r:HAS_MODULE]->(m)
RETURN c, r, m",2,,FALSE
attDef,,"CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""attDef""])') YIELD value AS attDef
WITH attDef,
      attDef.ident AS attIdent,
      [child IN attDef._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS attGloss,
      [child IN attDef._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS attDesc,
      // Traverse up to find the nearest classSpec ancestor and get its module attribute
      [ancestor IN [(attDef._parent._parent)] WHERE ancestor._type = 'classSpec' | ancestor.module][0] AS attModule
MERGE (a:AttDef {id: attIdent})
ON CREATE SET
  a.name = attIdent,
  a.gloss = attGloss,
  a.desc = attDesc
ON MATCH SET
  a.name = attIdent,
  a.gloss = attGloss,
  a.desc = attDesc
WITH a, attModule
WHERE attModule IS NOT NULL
MERGE (m:Module {kind: attModule})
ON CREATE SET
    m.name = attModule
ON MATCH SET
    m.name = attModule
MERGE (a)-[r:HAS_MODULE]->(m)
RETURN a, r, m",3,,FALSE
attClasses,,"CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""classSpec""])') YIELD value AS classSpec
WITH classSpec,
     classSpec.ident AS classIdent,
     classSpec.module AS classModule,
     [child IN classSpec._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS classGloss, // Extract gloss text
     [child IN classSpec._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS classDesc, // Extract desc text
     [attListChild IN classSpec._children WHERE attListChild._type = 'attList' | [attDefChild IN attListChild._children WHERE attDefChild._type = 'attDef' | attDefChild.ident]] AS attDefIdents // Extract attDef idents
MERGE (c:ClassSpec {id: classIdent})
ON CREATE SET
  c.name = classIdent,
  c.gloss = classGloss, // Set gloss as a property on creation
  c.desc = classDesc, // Set desc as a property on creation
  c.attributes = REDUCE(s = [], x IN attDefIdents | s + x) // Flatten the list of lists into a single list of attributes
ON MATCH SET
  c.name = classIdent,
  c.gloss = classGloss, // Update gloss as a property on match
  c.desc = classDesc, // Update desc as a property on match
  c.attributes = REDUCE(s = [], x IN attDefIdents | s + x) // Update attributes as a property on match
WITH c, classModule
WHERE classModule IS NOT NULL
MERGE (m:Module {kind: classModule})
ON CREATE SET
    m.name = classModule
ON MATCH SET
    m.name = classModule
MERGE (c)-[r:HAS_MODULE]->(m)
RETURN c, r, m",4,,FALSE
HasAttribute,,"// 1. Create or Merge AttDef nodes and their Module relationships
CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""attDef""])') YIELD value AS attDef
WITH attDef,
      attDef.ident AS attIdent,
      [child IN attDef._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS attGloss,
      [child IN attDef._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS attDesc,
      // Traverse up to find the nearest classSpec ancestor and get its module attribute
      [ancestor IN [(attDef._parent._parent)] WHERE ancestor._type = 'classSpec' | ancestor.module][0] AS attModule
MERGE (a:AttDef {id: attIdent})
ON CREATE SET
   a.name = attIdent,
   a.gloss = attGloss,
   a.desc = attDesc
ON MATCH SET
   a.name = attIdent,
   a.gloss = attGloss,
   a.desc = attDesc
WITH a, attModule
WHERE attModule IS NOT NULL
MERGE (m:Module {kind: attModule})
ON CREATE SET
    m.name = attModule
ON MATCH SET
    m.name = attModule
MERGE (a)-[r:HAS_MODULE]->(m);

// 2. Create or Merge ClassSpec nodes, their Module relationships, and then connect to AttDef nodes
CALL apoc.load.xml(""file:///p5subset_only_en.xml"", '(/*[local-name()=""TEI""]//*[local-name() = ""classSpec""])') YIELD value AS classSpec
WITH classSpec,
      classSpec.ident AS classIdent,
      classSpec.module AS classModule,
      [child IN classSpec._children WHERE child._type = 'gloss' AND child._text IS NOT NULL | child._text][0] AS classGloss, // Extract gloss text
      [child IN classSpec._children WHERE child._type = 'desc' AND child._text IS NOT NULL | child._text][0] AS classDesc, // Extract desc text
      [attListChild IN classSpec._children WHERE attListChild._type = 'attList' | [attDefChild IN attListChild._children WHERE attDefChild._type = 'attDef' | attDefChild.ident]] AS attDefIdents // Extract attDef idents
MERGE (c:ClassSpec {id: classIdent})
ON CREATE SET
  c.name = classIdent,
  c.gloss = classGloss, // Set gloss as a property on creation
  c.desc = classDesc, // Set desc as a property on creation
  c.attributes = REDUCE(s = [], x IN attDefIdents | s + x) // Flatten the list of lists into a single list of attributes
ON MATCH SET
  c.name = classIdent,
  c.gloss = classGloss, // Update gloss as a property on match
  c.desc = classDesc, // Update desc as a property on match
  c.attributes = REDUCE(s = [], x IN attDefIdents | s + x) // Update attributes as a property on match
WITH c, classModule, REDUCE(s = [], x IN attDefIdents | s + x) AS classAttributes
WHERE classModule IS NOT NULL
MERGE (m:Module {kind: classModule})
ON CREATE SET
    m.name = classModule
ON MATCH SET
    m.name = classModule
MERGE (c)-[r:HAS_MODULE]->(m)
WITH c, classAttributes
UNWIND classAttributes AS attributeId
MATCH (a:AttDef {id: attributeId}) // Ensure AttDef node exists before attempting to create relationship
MERGE (c)-[:HAS_ATTRIBUTE]->(a)
RETURN c, a",5,,FALSE
