
// ==== Generated by XSLT Transformation ====

// 1. SETUP: Create Constraints for Performance and Data Integrity
 CREATE CONSTRAINT IF NOT EXISTS FOR (d:Document) REQUIRE d.title IS UNIQUE;
 CREATE CONSTRAINT IF NOT EXISTS FOR (s:Section) REQUIRE s.id IS UNIQUE;
 CREATE CONSTRAINT IF NOT EXISTS FOR (spec:Specification) REQUIRE spec.name IS UNIQUE;

// 2. LOAD AND PROCESS: Load the JSON and start the recursive import
CALL apoc.load.json("file:///sandboxTest.json") YIELD value

// Create the root Document node
MERGE (doc:Document {title: 'SOURCE XML AS BASIS FOR A KNOWLEDGE GRAPH'})

 FOREACH ( part_data  IN  value . CONTAINS_PARTS  | 
       MERGE (part:Part {name: part_data.PART}) SET part.sequence = part_data.SEQUENCE 
       MERGE ( doc )-[: HAS_PART ]->( part ) 
      FOREACH ( chapter_data  IN  part_data . CONTAINS_CHAPTERS  | 
           MERGE (chapter:Section {id: chapter_data.ID}) SET chapter.sequence = chapter_data.SEQUENCE, chapter.title = chapter_data.CHAPTER 
           MERGE ( part )-[: HAS_CHAPTER ]->( chapter ) 
          FOREACH ( section_data  IN  chapter_data . CONTAINS_SECTIONS  | 
               MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
               MERGE ( chapter )-[: HAS_SECTION ]->( section ) 
              FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                   MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                   MERGE ( section )-[: HAS_SECTION ]->( section ) 
                  FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                       MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                       MERGE ( section )-[: HAS_SECTION ]->( section ) 
                      FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                           MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                           MERGE ( section )-[: HAS_SECTION ]->( section ) 
                          FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                               MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                               MERGE ( section )-[: HAS_SECTION ]->( section ) 
                              FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                   MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                   MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                  FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                       MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                       MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                      FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                           MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                           MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                          FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                               MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                               MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                              FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                   MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                   MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                  FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                       MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                       MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                      FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                           MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                           MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                          FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                               MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                               MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                              FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                   MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                                   MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                                  FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                       MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                                       MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                                      FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                           MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                                           MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                                          FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                               MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                                               MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                                              FOREACH ( section_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                                   MERGE (section:Section {id: section_data.ID}) SET section.title = section_data.SECTION, section.type = section_data.xs:string 
                                                                                   MERGE ( section )-[: HAS_SECTION ]->( section ) 
                                                                              ) 
                                                                              FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                                   MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                                                   MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                                              ) 
                                                                              FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                                   MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                              ) 
                                                                          ) 
                                                                          FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                               MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                                               MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                                              FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                                   MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                              ) 
                                                                          ) 
                                                                          FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                               MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                                   CREATE (speclist:Speclist) 
                                                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                              ) 
                                                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                              ) 
                                                                          ) 
                                                                      ) 
                                                                      FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                           MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                                           MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                                          FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                               MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                                   CREATE (speclist:Speclist) 
                                                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                              ) 
                                                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                              ) 
                                                                          ) 
                                                                      ) 
                                                                      FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                           MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                               CREATE (speclist:Speclist) 
                                                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                          ) 
                                                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                              ) 
                                                                          ) 
                                                                      ) 
                                                                  ) 
                                                                  FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                       MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                                       MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                                      FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                           MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                               CREATE (speclist:Speclist) 
                                                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                          ) 
                                                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                              ) 
                                                                          ) 
                                                                      ) 
                                                                  ) 
                                                                  FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                       MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                           CREATE (speclist:Speclist) 
                                                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                      ) 
                                                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                          ) 
                                                                      ) 
                                                                  ) 
                                                              ) 
                                                              FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                                   MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                                   MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                                  FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                       MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                           CREATE (speclist:Speclist) 
                                                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                      ) 
                                                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                          ) 
                                                                      ) 
                                                                  ) 
                                                              ) 
                                                              FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                   MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                       CREATE (speclist:Speclist) 
                                                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                  ) 
                                                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                      ) 
                                                                  ) 
                                                              ) 
                                                          ) 
                                                          FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                               MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                               MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                              FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                                   MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                       CREATE (speclist:Speclist) 
                                                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                                  ) 
                                                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                      ) 
                                                                  ) 
                                                              ) 
                                                          ) 
                                                          FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                               MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                   CREATE (speclist:Speclist) 
                                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                              ) 
                                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                  ) 
                                                              ) 
                                                          ) 
                                                      ) 
                                                      FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                           MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                           MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                          FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                               MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                                   CREATE (speclist:Speclist) 
                                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                              ) 
                                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                                  ) 
                                                              ) 
                                                          ) 
                                                      ) 
                                                      FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                           MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                               CREATE (speclist:Speclist) 
                                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                          ) 
                                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                              ) 
                                                          ) 
                                                      ) 
                                                  ) 
                                                  FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                       MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                       MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                      FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                           MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                               CREATE (speclist:Speclist) 
                                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                          ) 
                                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                              ) 
                                                          ) 
                                                      ) 
                                                  ) 
                                                  FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                       MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                           CREATE (speclist:Speclist) 
                                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                      ) 
                                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                          ) 
                                                      ) 
                                                  ) 
                                              ) 
                                              FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                                   MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                                   MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                                  FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                       MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                           CREATE (speclist:Speclist) 
                                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                      ) 
                                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                          ) 
                                                      ) 
                                                  ) 
                                              ) 
                                              FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                   MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                       CREATE (speclist:Speclist) 
                                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                  ) 
                                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                      ) 
                                                  ) 
                                              ) 
                                          ) 
                                          FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                               MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                               MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                              FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                                   MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                       CREATE (speclist:Speclist) 
                                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                                  ) 
                                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                      ) 
                                                  ) 
                                              ) 
                                          ) 
                                          FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                               MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                   CREATE (speclist:Speclist) 
                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                              ) 
                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                  ) 
                                              ) 
                                          ) 
                                      ) 
                                      FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                           MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                           MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                          FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                               MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                                   CREATE (speclist:Speclist) 
                                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                              ) 
                                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                                  ) 
                                              ) 
                                          ) 
                                      ) 
                                      FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                           MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                               CREATE (speclist:Speclist) 
                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                          ) 
                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                              ) 
                                          ) 
                                      ) 
                                  ) 
                                  FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                       MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                       MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                      FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                           MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                               CREATE (speclist:Speclist) 
                                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                          ) 
                                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                              ) 
                                          ) 
                                      ) 
                                  ) 
                                  FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                       MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                           CREATE (speclist:Speclist) 
                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                      ) 
                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                          ) 
                                      ) 
                                  ) 
                              ) 
                              FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                                   MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                                   MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                                  FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                       MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                           CREATE (speclist:Speclist) 
                                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                      ) 
                                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                          ) 
                                      ) 
                                  ) 
                              ) 
                              FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                   MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                       CREATE (speclist:Speclist) 
                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                  ) 
                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                      ) 
                                  ) 
                              ) 
                          ) 
                          FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                               MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                               MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                              FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                                   MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                       CREATE (speclist:Speclist) 
                                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                                  ) 
                                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                      ) 
                                  ) 
                              ) 
                          ) 
                          FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                               MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                   CREATE (speclist:Speclist) 
                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                              ) 
                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                  ) 
                              ) 
                          ) 
                      ) 
                      FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                           MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                           MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                          FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                               MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                                   CREATE (speclist:Speclist) 
                                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                              ) 
                              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                                  ) 
                              ) 
                          ) 
                      ) 
                      FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                           MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                               CREATE (speclist:Speclist) 
                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                          ) 
                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                              ) 
                          ) 
                      ) 
                  ) 
                  FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                       MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                       MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                      FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                           CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                           MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                          FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                               CREATE (speclist:Speclist) 
                               MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                          ) 
                          FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                               CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                               MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                              FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                                   MERGE (specification:Spec {id: specification_data.SPEC}) 
                                   MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                              ) 
                          ) 
                      ) 
                  ) 
                  FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                       MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                           CREATE (speclist:Speclist) 
                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                      ) 
                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                          ) 
                      ) 
                  ) 
              ) 
              FOREACH ( nestedsubsection_data  IN  section_data . CONTAINS_SECTIONS  | 
                   MERGE (nestedsubsection:Nestedsubsection {id: nestedsubsection_data.ID}) SET nestedsubsection.sequence = nestedsubsection_data.SEQUENCE, nestedsubsection.title = nestedsubsection_data.SECTION 
                   MERGE ( section )-[: HAS_SECTION ]->( nestedsubsection ) 
                  FOREACH ( paragraph_data  IN  nestedsubsection_data . CONTAINS_PARAS  | 
                       CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                       MERGE ( nestedsubsection )-[: HAS_PARAGRAPH ]->( paragraph ) 
                      FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                           CREATE (speclist:Speclist) 
                           MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                      ) 
                      FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                           CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                           MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                          FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                               MERGE (specification:Spec {id: specification_data.SPEC}) 
                               MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                          ) 
                      ) 
                  ) 
              ) 
              FOREACH ( paragraph_data  IN  section_data . CONTAINS_PARAS  | 
                   CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
                   MERGE ( section )-[: HAS_PARAGRAPH ]->( paragraph ) 
                  FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                       CREATE (speclist:Speclist) 
                       MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
                  ) 
                  FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                       CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                       MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                      FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                           MERGE (specification:Spec {id: specification_data.SPEC}) 
                           MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                      ) 
                  ) 
              ) 
          ) 
          FOREACH ( paragraph_data  IN  chapter_data . CONTAINS_PARAS  | 
               CREATE (paragraph:Para) SET paragraph.sequence = paragraph_data.SEQUENCE, paragraph.text = paragraph_data.PARASTRING 
               MERGE ( chapter )-[: HAS_PARAGRAPH ]->( paragraph ) 
              FOREACH ( speclist_data  IN  paragraph_data . CONTAINS_SPECLIST  | 
                   CREATE (speclist:Speclist) 
                   MERGE ( paragraph )-[: HAS_SPECLIST ]->( speclist ) 
              ) 
              FOREACH ( specgrp_data  IN  paragraph_data . CONTAINS_SPECGRP  | 
                   CREATE (specgrp:Specgrp) SET specgrp.title = specgrp_data.SPECGRP, specgrp.type = specgrp_data.xs:string 
                   MERGE ( paragraph )-[: HAS_SPECGRP ]->( specgrp ) 
                  FOREACH ( specification_data  IN  specgrp_data . CONTAINS_SPECS  | 
                       MERGE (specification:Spec {id: specification_data.SPEC}) 
                       MERGE ( specgrp )-[: HAS_SPEC ]->( specification ) 
                  ) 
              ) 
          ) 
      ) 
  ) 
